# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class PolicyResponse(Model):
    """Response object from the policy API.

    :param id: ID of the policy
    :type id: ~shrine.models.PolicyId
    :param meta: MetaData associated with the policy
    :type meta: ~shrine.models.PolicyResponseMeta
    :param description: Description of what the policy is entitling
    :type description: str
    :param applications: Applications to which the policy applies
    :type applications: list[str]
    :param grant: Allow or deny. Possible values include: 'Undefined',
     'Allow', 'Deny'
    :type grant: str or ~shrine.models.enum
    :param paths: Paths that this policy will be applied to
    :type paths: list[~shrine.models.PathDefinition]
    :param for_property: "For Specification" for when the policy is to be
     applied
    :type for_property: list[~shrine.models.ForSpec]
    :param if_property: "If Specification" for when the policy is to be
     applied
    :type if_property: list[~shrine.models.IfExpression]
    :param when: "When specification" for when the policy is to be applied
    :type when: ~shrine.models.WhenSpec
    :param how: "How Specification" for when the policy is to be applied
    :type how: ~shrine.models.HowSpec
    :param _links:
    :type _links: list[~shrine.models.Link]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'PolicyId'},
        'meta': {'key': 'meta', 'type': 'PolicyResponseMeta'},
        'description': {'key': 'description', 'type': 'str'},
        'applications': {'key': 'applications', 'type': '[str]'},
        'grant': {'key': 'grant', 'type': 'str'},
        'paths': {'key': 'paths', 'type': '[PathDefinition]'},
        'for_property': {'key': 'for', 'type': '[ForSpec]'},
        'if_property': {'key': 'if', 'type': '[IfExpression]'},
        'when': {'key': 'when', 'type': 'WhenSpec'},
        'how': {'key': 'how', 'type': 'HowSpec'},
        '_links': {'key': '_links', 'type': '[Link]'},
    }

    def __init__(self, id=None, meta=None, description=None, applications=None, grant=None, paths=None, for_property=None, if_property=None, when=None, how=None, _links=None):
        super(PolicyResponse, self).__init__()
        self.id = id
        self.meta = meta
        self.description = description
        self.applications = applications
        self.grant = grant
        self.paths = paths
        self.for_property = for_property
        self.if_property = if_property
        self.when = when
        self.how = how
        self._links = _links
