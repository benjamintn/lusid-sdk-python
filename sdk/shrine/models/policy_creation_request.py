# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class PolicyCreationRequest(Model):
    """PolicyCreationRequest.

    :param code: Code of the policy being created
    :type code: str
    :param meta: Meta data associated with the policy
    :type meta: ~shrine.models.PolicyCreationRequestMeta
    :param description: Description of what the policy will be used for
    :type description: str
    :param applications: Applications this policy is used with
    :type applications: list[str]
    :param grant: Allow or deny. Possible values include: 'Undefined',
     'Allow', 'Deny'
    :type grant: str or ~shrine.models.enum
    :param paths: Paths that this policy will be applied to
    :type paths: list[~shrine.models.PathDefinition]
    :param for_property: "For Specification" for when the policy is to be
     applied
    :type for_property: list[~shrine.models.ForSpec]
    :param if_property: "If Specification" for when the policy is to be
     applied
    :type if_property: list[~shrine.models.IfExpression]
    :param when: "When specification" for when the policy is to be applied
    :type when: ~shrine.models.WhenSpec
    :param how: "How Specification" for when the policy is to be applied
    :type how: ~shrine.models.HowSpec
    """

    _validation = {
        'code': {'required': True, 'max_length': 50, 'min_length': 3},
        'description': {'max_length': 1024, 'min_length': 0},
        'grant': {'required': True},
        'paths': {'required': True},
        'when': {'required': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'meta': {'key': 'meta', 'type': 'PolicyCreationRequestMeta'},
        'description': {'key': 'description', 'type': 'str'},
        'applications': {'key': 'applications', 'type': '[str]'},
        'grant': {'key': 'grant', 'type': 'str'},
        'paths': {'key': 'paths', 'type': '[PathDefinition]'},
        'for_property': {'key': 'for', 'type': '[ForSpec]'},
        'if_property': {'key': 'if', 'type': '[IfExpression]'},
        'when': {'key': 'when', 'type': 'WhenSpec'},
        'how': {'key': 'how', 'type': 'HowSpec'},
    }

    def __init__(self, code, grant, paths, when, meta=None, description=None, applications=None, for_property=None, if_property=None, how=None):
        super(PolicyCreationRequest, self).__init__()
        self.code = code
        self.meta = meta
        self.description = description
        self.applications = applications
        self.grant = grant
        self.paths = paths
        self.for_property = for_property
        self.if_property = if_property
        self.when = when
        self.how = how
